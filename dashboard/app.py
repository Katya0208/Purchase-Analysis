import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from clickhouse_driver import Client
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫",
    page_icon="üìä",
    layout="wide"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
@st.cache_resource
def get_clickhouse_client():
    return Client(
        host=os.getenv("CLICKHOUSE_HOST", "localhost"),
        user=os.getenv("CLICKHOUSE_USER", "default"),
        password=os.getenv("CLICKHOUSE_PASSWORD", "")
    )

client = get_clickhouse_client()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def get_top_products(limit=10):
    query = f"""
    SELECT 
        product_id,
        sum(quantity) as total_quantity,
        sum(quantity * price) as total_revenue
    FROM purchases_rt
    GROUP BY product_id
    ORDER BY total_quantity DESC
    LIMIT {limit}
    """
    return pd.DataFrame(client.execute(query), columns=['product_id', 'total_quantity', 'total_revenue'])

@st.cache_data(ttl=300)
def get_sales_by_month():
    query = """
    SELECT 
        toStartOfMonth(ts) as month,
        count() as total_purchases,
        sum(quantity) as total_quantity,
        sum(quantity * price) as total_revenue
    FROM purchases_rt
    GROUP BY month
    ORDER BY month
    """
    return pd.DataFrame(client.execute(query), columns=['month', 'total_purchases', 'total_quantity', 'total_revenue'])

@st.cache_data(ttl=300)
def get_revenue_by_hour():
    query = """
    SELECT 
        toHour(ts) as hour,
        sum(quantity * price) as revenue
    FROM purchases_rt
    GROUP BY hour
    ORDER BY hour
    """
    return pd.DataFrame(client.execute(query), columns=['hour', 'revenue'])

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
    sales_df = get_sales_by_month()
    if not sales_df.empty:
        fig = px.line(sales_df, x='month', y='total_revenue',
                     title='–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')
        st.plotly_chart(fig, use_container_width=True)
        
        fig2 = px.bar(sales_df, x='month', y='total_quantity',
                      title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º')
        st.plotly_chart(fig2, use_container_width=True)

with col2:
    st.subheader("üïí –í—ã—Ä—É—á–∫–∞ –ø–æ —á–∞—Å–∞–º")
    revenue_df = get_revenue_by_hour()
    if not revenue_df.empty:
        fig = px.line(revenue_df, x='hour', y='revenue',
                     title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ —á–∞—Å–∞–º')
        st.plotly_chart(fig, use_container_width=True)

# –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
st.subheader("üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤")
limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤", 5, 20, 10)
top_products_df = get_top_products(limit)

if not top_products_df.empty:
    fig = px.bar(top_products_df, x='product_id', y='total_quantity',
                 title='–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂')
    st.plotly_chart(fig, use_container_width=True)
    
    fig2 = px.bar(top_products_df, x='product_id', y='total_revenue',
                  title='–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ')
    st.plotly_chart(fig2, use_container_width=True)
    
    st.dataframe(top_products_df)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
if not sales_df.empty:
    total_revenue = sales_df['total_revenue'].sum()
    total_quantity = sales_df['total_quantity'].sum()
    total_purchases = sales_df['total_purchases'].sum()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"${total_revenue:,.2f}")
    with col2:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂", f"{total_quantity:,}")
    with col3:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫", f"{total_purchases:,}") 